<?xml version="1.0" encoding="UTF-8"?>
<!--
~  Licensed to the Apache Software Foundation (ASF) under one
~  or more contributor license agreements.  See the NOTICE file
~  distributed with this work for additional information
~  regarding copyright ownership.  The ASF licenses this file
~  to you under the Apache License, Version 2.0 (the
~  "License"); you may not use this file except in compliance
~  with the License.  You may obtain a copy of the License at
~
~   http://www.apache.org/licenses/LICENSE-2.0
~
~  Unless required by applicable law or agreed to in writing,
~  software distributed under the License is distributed on an
~   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~  KIND, either express or implied.  See the License for the
~  specific language governing permissions and limitations
~  under the License.
-->
<template name="SearchList" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="part"
               description="list of one or more activity resource properties that the API response will include."/>

    <parameter name="forContentOwner"
               description="This parameter is intended exclusively for YouTube content partners."/>
    <parameter name="forMine"
               description="restricts the search to only retrieve videos owned by the authenticated user."/>
    <parameter name="relatedToVideoId"
               description="retrieves a list of videos that are related to the video that the parameter value identifies."/>

    <parameter name="filter"
               description="Concatination of filters parameters"/>

    <parameter name="channelId" description="API response should only contain resources created by the channel."/>
    <parameter name="channelType" description="lets you restrict a search to a particular type of channel."/>
    <parameter name="eventType" description="restricts a search to broadcast events."/>
    <parameter name="location"
               description="restricts a search to videos that specify, in their metadata, a geographic location that falls within that area."/>
    <parameter name="locationRadius"
               description="in conjunction with the location parameter, defines a circular geographic area."/>
    <parameter name="maxResults" description="the maximum number of items that should be returned."/>
    <property name="onBehalfOfContentOwner"/>
    <parameter name="order"
               description="specifies the method that will be used to order resources in the API response."/>
    <parameter name="pageToken" description="specific page in the result set that should be returned."/>
    <parameter name="publishedAfter"
               description="specifies the earliest date and time that an activity could have occurred."/>
    <parameter name="publishedBefore"
               description="specifies the date and time before which an activity must have occurred."/>
    <parameter name="q" description="specifies the query term to search for Your request."/>
    <parameter name="regionCode" description="specified country."/>
    <parameter name="safeSearch"
               description="the search results should include restricted content as well as standard content."/>
    <parameter name="topicId"
               description="API response should only contain resources associated with the specified topic."/>
    <parameter name="type" description="restricts a search query to only retrieve a particular type of resource."/>
    <parameter name="videoCaption"
               description="indicates whether the API should filter video search results based on whether they have captions."/>
    <parameter name="videoCategoryId" description="filters video search results based on their category."/>
    <parameter name="videoDefinition"
               description="lets you restrict a search to only include either high definition (HD) or standard definition (SD) videos."/>
    <parameter name="videoDimension" description="restrict a search to only retrieve 2D or 3D videos."/>
    <parameter name="videoDuration" description="filters video search results based on their duration."/>
    <parameter name="videoEmbeddable"
               description="restrict a search to only videos that can be embedded into a webpage."/>
    <parameter name="videoLicense"
               description="filters search results to only include videos with a particular license."/>
    <parameter name="videoSyndicated"
               description="lets you to restrict a search to only videos that can be played outside youtube."/>
    <parameter name="videoType" description="lets you restrict a search to a particular type of videos."/>

    <parameter name="fields" description="specifying which fields to include in a partial response."/>

    <parameter name="optionalParameters"
               description="Concatination of optional parameters"/>

    <sequence>
        <property name="uri.var.part" expression="$func:part"/>

        <property name="uri.var.forContentOwner" expression="$func:forContentOwner"/>
        <property name="uri.var.forMine" expression="$func:forMine"/>
        <property name="uri.var.relatedToVideoId" expression="$func:relatedToVideoId"/>

        <property name="filters" value=""/>

        <property name="uri.var.channelId" expression="$func:channelId"/>
        <property name="uri.var.channelType" expression="$func:channelType"/>
        <property name="uri.var.eventType" expression="$func:eventType"/>
        <property name="uri.var.location" expression="$func:location"/>
        <property name="uri.var.locationRadius" expression="$func:locationRadius"/>
        <property name="uri.var.maxResults" expression="$func:maxResults"/>
        <property name="uri.var.onBehalfOfContentOwner" expression="$func:onBehalfOfContentOwner"/>
        <property name="uri.var.order" expression="$func:order"/>
        <property name="uri.var.pageToken" expression="$func:pageToken"/>
        <property name="uri.var.publishedAfter" expression="$func:publishedAfter"/>
        <property name="uri.var.publishedBefore" expression="$func:publishedBefore"/>
        <property name="uri.var.q" expression="$func:q"/>
        <property name="uri.var.regionCode" expression="$func:regionCode"/>
        <property name="uri.var.safeSearch" expression="$func:safeSearch"/>
        <property name="uri.var.topicId" expression="$func:topicId"/>
        <property name="uri.var.type" expression="$func:type"/>
        <property name="uri.var.videoCaption" expression="$func:videoCaption"/>
        <property name="uri.var.videoCategoryId" expression="$func:videoCategoryId"/>
        <property name="uri.var.videoDefinition" expression="$func:videoDefinition"/>
        <property name="uri.var.videoDimension" expression="$func:videoDimension"/>
        <property name="uri.var.videoDuration" expression="$func:videoDuration"/>
        <property name="uri.var.videoEmbeddable" expression="$func:videoEmbeddable"/>
        <property name="uri.var.videoLicense" expression="$func:videoLicense"/>
        <property name="uri.var.videoSyndicated" expression="$func:videoSyndicated"/>
        <property name="uri.var.videoType" expression="$func:videoType"/>

        <property name="uri.var.fields" expression="$func:fields"/>

        <property name="parameters" value=""/>


        <filter
                xpath="get-property('uri.var.forContentOwner') = '' or  not(string(get-property('uri.var.forContentOwner')))">
            <then>
                <property name="uri.var.forContentOwner" value=""/>
            </then>
            <else>
                <property name="filters" expression="fn:concat(get-property('filters'),
                '&amp;forContentOwner=', get-property('uri.var.forContentOwner'))"/>
            </else>
        </filter>
        <filter
                xpath="get-property('uri.var.forMine') = '' or  not(string(get-property('uri.var.forMine')))">
            <then>
                <property name="uri.var.forMine" value=""/>
            </then>
            <else>
                <property name="filters" expression="fn:concat(get-property('filters'),
                '&amp;forMine=', get-property('uri.var.forMine'))"/>
            </else>
        </filter>
        <filter
                xpath="get-property('uri.var.relatedToVideoId') = '' or  not(string(get-property('uri.var.relatedToVideoId')))">
            <then>
                <property name="uri.var.relatedToVideoId" value=""/>
            </then>
            <else>
                <property name="filters" expression="fn:concat(get-property('filters'),
                '&amp;relatedToVideoId=', get-property('uri.var.relatedToVideoId'))"/>
            </else>
        </filter>

        <property name="uri.var.filter" expression="get-property('filters')"/>

        <filter
                xpath="get-property('uri.var.channelId') = '' or  not(string(get-property('uri.var.channelId')))">
            <then>
                <property name="uri.var.channelId" value=""/>
            </then>
            <else>
                <property name="parameters" expression="fn:concat(get-property('parameters'),
                '&amp;channelId=', get-property('uri.var.channelId'))"/>
            </else>
        </filter>
        <filter
                xpath="get-property('uri.var.channelType') = '' or  not(string(get-property('uri.var.channelType')))">
            <then>
                <property name="uri.var.channelType" value=""/>
            </then>
            <else>
                <property name="parameters" expression="fn:concat(get-property('parameters'),
                '&amp;channelType=', get-property('uri.var.channelType'))"/>
            </else>
        </filter>
        <filter
                xpath="get-property('uri.var.eventType') = '' or  not(string(get-property('uri.var.eventType')))">
            <then>
                <property name="uri.var.eventType" value=""/>
            </then>
            <else>
                <property name="parameters" expression="fn:concat(get-property('parameters'),
                '&amp;eventType=', get-property('uri.var.eventType'))"/>
            </else>
        </filter>
        <filter
                xpath="get-property('uri.var.location') = '' or  not(string(get-property('uri.var.location')))">
            <then>
                <property name="uri.var.location" value=""/>
            </then>
            <else>
                <property name="parameters" expression="fn:concat(get-property('parameters'),
                '&amp;location=', get-property('uri.var.location'))"/>
            </else>
        </filter>
        <filter
                xpath="get-property('uri.var.locationRadius') = '' or  not(string(get-property('uri.var.locationRadius')))">
            <then>
                <property name="uri.var.locationRadius" value=""/>
            </then>
            <else>
                <property name="parameters" expression="fn:concat(get-property('parameters'),
                '&amp;locationRadius=', get-property('uri.var.locationRadius'))"/>
            </else>
        </filter>
        <filter
                xpath="get-property('uri.var.maxResults') = '' or  not(string(get-property('uri.var.maxResults')))">
            <then>
                <property name="uri.var.maxResults" value=""/>
            </then>
            <else>
                <property name="parameters" expression="fn:concat(get-property('parameters'),
                '&amp;maxResults=', get-property('uri.var.maxResults'))"/>
            </else>
        </filter>
        <filter
                xpath="get-property('uri.var.onBehalfOfContentOwner') = '' or  not(string(get-property('uri.var.onBehalfOfContentOwner')))">
            <then>
                <property name="uri.var.onBehalfOfContentOwner" value=""/>
            </then>
            <else>
                <property name="parameters" expression="fn:concat(get-property('parameters'),
                '&amp;onBehalfOfContentOwner=', get-property('uri.var.onBehalfOfContentOwner'))"/>
            </else>
        </filter>
        <filter
                xpath="get-property('uri.var.order') = '' or  not(string(get-property('uri.var.order')))">
            <then>
                <property name="uri.var.order" value=""/>
            </then>
            <else>
                <property name="parameters" expression="fn:concat(get-property('parameters'),
                '&amp;order=', get-property('uri.var.order'))"/>
            </else>
        </filter>
        <filter
                xpath="get-property('uri.var.pageToken') = '' or  not(string(get-property('uri.var.pageToken')))">
            <then>
                <property name="uri.var.pageToken" value=""/>
            </then>
            <else>
                <property name="parameters" expression="fn:concat(get-property('parameters'),
                '&amp;pageToken=', get-property('uri.var.pageToken'))"/>
            </else>
        </filter>
        <filter
                xpath="get-property('uri.var.publishedAfter') = '' or  not(string(get-property('uri.var.publishedAfter')))">
            <then>
                <property name="uri.var.publishedAfter" value=""/>
            </then>
            <else>
                <property name="parameters" expression="fn:concat(get-property('parameters'),
                '&amp;publishedAfter=', get-property('uri.var.publishedAfter'))"/>
            </else>
        </filter>
        <filter
                xpath="get-property('uri.var.publishedBefore') = '' or  not(string(get-property('uri.var.publishedBefore')))">
            <then>
                <property name="uri.var.publishedBefore" value=""/>
            </then>
            <else>
                <property name="parameters" expression="fn:concat(get-property('parameters'),
                '&amp;publishedBefore=', get-property('uri.var.publishedBefore'))"/>
            </else>
        </filter>
        <filter
                xpath="get-property('uri.var.q') = '' or  not(string(get-property('uri.var.q')))">
            <then>
                <property name="uri.var.q" value=""/>
            </then>
            <else>
                <property name="parameters" expression="fn:concat(get-property('parameters'),
                '&amp;q=', get-property('uri.var.q'))"/>
            </else>
        </filter>
        <filter
                xpath="get-property('uri.var.regionCode') = '' or  not(string(get-property('uri.var.regionCode')))">
            <then>
                <property name="uri.var.regionCode" value=""/>
            </then>
            <else>
                <property name="parameters" expression="fn:concat(get-property('parameters'),
                '&amp;regionCode=', get-property('uri.var.regionCode'))"/>
            </else>
        </filter>
        <filter
                xpath="get-property('uri.var.safeSearch') = '' or  not(string(get-property('uri.var.safeSearch')))">
            <then>
                <property name="uri.var.safeSearch" value=""/>
            </then>
            <else>
                <property name="parameters" expression="fn:concat(get-property('parameters'),
                '&amp;safeSearch=', get-property('uri.var.safeSearch'))"/>
            </else>
        </filter>
        <filter
                xpath="get-property('uri.var.topicId') = '' or  not(string(get-property('uri.var.topicId')))">
            <then>
                <property name="uri.var.topicId" value=""/>
            </then>
            <else>
                <property name="parameters" expression="fn:concat(get-property('parameters'),
                '&amp;topicId=', get-property('uri.var.topicId'))"/>
            </else>
        </filter>
        <filter
                xpath="get-property('uri.var.type') = '' or  not(string(get-property('uri.var.type')))">
            <then>
                <property name="uri.var.type" value=""/>
            </then>
            <else>
                <property name="parameters" expression="fn:concat(get-property('parameters'),
                '&amp;type=', get-property('uri.var.type'))"/>
            </else>
        </filter>
        <filter
                xpath="get-property('uri.var.videoCaption') = '' or  not(string(get-property('uri.var.videoCaption')))">
            <then>
                <property name="uri.var.videoCaption" value=""/>
            </then>
            <else>
                <property name="parameters" expression="fn:concat(get-property('parameters'),
                '&amp;videoCaption=', get-property('uri.var.videoCaption'))"/>
            </else>
        </filter>
        <filter
                xpath="get-property('uri.var.videoCategoryId') = '' or  not(string(get-property('uri.var.videoCategoryId')))">
            <then>
                <property name="uri.var.videoCategoryId" value=""/>
            </then>
            <else>
                <property name="parameters" expression="fn:concat(get-property('parameters'),
                '&amp;videoCategoryId=', get-property('uri.var.videoCategoryId'))"/>
            </else>
        </filter>
        <filter
                xpath="get-property('uri.var.videoDefinition') = '' or  not(string(get-property('uri.var.videoDefinition')))">
            <then>
                <property name="uri.var.videoDefinition" value=""/>
            </then>
            <else>
                <property name="parameters" expression="fn:concat(get-property('parameters'),
                '&amp;videoDefinition=', get-property('uri.var.videoDefinition'))"/>
            </else>
        </filter>
        <filter
                xpath="get-property('uri.var.videoDimension') = '' or  not(string(get-property('uri.var.videoDimension')))">
            <then>
                <property name="uri.var.videoDimension" value=""/>
            </then>
            <else>
                <property name="parameters" expression="fn:concat(get-property('parameters'),
                '&amp;videoDimension=', get-property('uri.var.videoDimension'))"/>
            </else>
        </filter>
        <filter
                xpath="get-property('uri.var.videoDuration') = '' or  not(string(get-property('uri.var.videoDuration')))">
            <then>
                <property name="uri.var.videoDuration" value=""/>
            </then>
            <else>
                <property name="parameters" expression="fn:concat(get-property('parameters'),
                '&amp;videoDuration=', get-property('uri.var.videoDuration'))"/>
            </else>
        </filter>
        <filter
                xpath="get-property('uri.var.videoEmbeddable') = '' or  not(string(get-property('uri.var.videoEmbeddable')))">
            <then>
                <property name="uri.var.videoEmbeddable" value=""/>
            </then>
            <else>
                <property name="parameters" expression="fn:concat(get-property('parameters'),
                '&amp;videoEmbeddable=', get-property('uri.var.videoEmbeddable'))"/>
            </else>
        </filter>
        <filter
                xpath="get-property('uri.var.videoLicense') = '' or  not(string(get-property('uri.var.videoLicense')))">
            <then>
                <property name="uri.var.videoLicense" value=""/>
            </then>
            <else>
                <property name="parameters" expression="fn:concat(get-property('parameters'),
                '&amp;videoLicense=', get-property('uri.var.videoLicense'))"/>
            </else>
        </filter>
        <filter
                xpath="get-property('uri.var.videoSyndicated') = '' or  not(string(get-property('uri.var.videoSyndicated')))">
            <then>
                <property name="uri.var.videoSyndicated" value=""/>
            </then>
            <else>
                <property name="parameters" expression="fn:concat(get-property('parameters'),
                '&amp;videoSyndicated=', get-property('uri.var.videoSyndicated'))"/>
            </else>
        </filter>
        <filter
                xpath="get-property('uri.var.videoType') = '' or  not(string(get-property('uri.var.videoType')))">
            <then>
                <property name="uri.var.videoType" value=""/>
            </then>
            <else>
                <property name="parameters" expression="fn:concat(get-property('parameters'),
                '&amp;videoType=', get-property('uri.var.videoType'))"/>
            </else>
        </filter>

        <property name="uri.var.optionalParameters" expression="get-property('parameters')"/>

        <call>
            <endpoint>
                <http method="GET"
                      uri-template="{uri.var.apiUrl}/search?part={uri.var.part}{uri.var.filter}{uri.var.optionalParameters}"/>
            </endpoint>
        </call>

    </sequence>
</template>