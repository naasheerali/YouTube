<?xml version="1.0" encoding="UTF-8"?>
<!--
~  Licensed to the Apache Software Foundation (ASF) under one
~  or more contributor license agreements.  See the NOTICE file
~  distributed with this work for additional information
~  regarding copyright ownership.  The ASF licenses this file
~  to you under the Apache License, Version 2.0 (the
~  "License"); you may not use this file except in compliance
~  with the License.  You may obtain a copy of the License at
~
~   http://www.apache.org/licenses/LICENSE-2.0
~
~  Unless required by applicable law or agreed to in writing,
~  software distributed under the License is distributed on an
~   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~  KIND, either express or implied.  See the License for the
~  specific language governing permissions and limitations
~  under the License.
-->
<template name="ChannelsUpdate" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="part"
               description="Identifies the properties that the write operation will set."/>

    <parameter name="onBehalfOfContentOwner"
               description="Instruct the API to only return channels managed by the content owner."/>
    <parameter name="fields" description="Specifying which fields to include in a partial response."/>

    <parameter name="optionalParameters"
               description="Concatenations of optional parameters"/>

    <parameter name="idParam"/>
    <parameter name="description"/>
    <parameter name="keywords"/>
    <parameter name="defaultTab"/>
    <parameter name="trackingAnalyticsAccountId"/>
    <parameter name="moderateComments"/>
    <parameter name="profileColor"/>
    <parameter name="showRelatedChannels"/>
    <parameter name="showBrowseView"/>
    <parameter name="featuredChannelsTitle"/>
    <parameter name="featuredChannelsUrls"/>
    <parameter name="unsubscribedTrailer"/>
    <parameter name="default"/>
    <parameter name="value"/>
    <parameter name="language"/>
    <parameter name="bannerExternalUrl"/>
    <parameter name="positiontype"/>
    <parameter name="cornerPosition"/>
    <parameter name="defaultTimingtype"/>
    <parameter name="defaultTimingoffsetMs"/>
    <parameter name="idtype"/>
    <parameter name="videoId"/>
    <parameter name="websiteUrl"/>
    <parameter name="timingtype"/>
    <parameter name="timingoffsetMs"/>
    <parameter name="customMessage"/>
    <parameter name="promotedByContentOwner"/>

    <sequence>
        <property name="uri.var.part" expression="$func:part"/>

        <property name="uri.var.onBehalfOfContentOwner" expression="$func:onBehalfOfContentOwner"/>
        <property name="uri.var.fields" expression="$func:fields"/>

        <property name="parameters" value=""/>

        <property name="uri.var.idParam" expression="$func:idParam"/>
        <property name="uri.var.description" expression="$func:description"/>
        <property name="uri.var.keywords" expression="$func:keywords"/>
        <property name="uri.var.defaultTab" expression="$func:defaultTab"/>
        <property name="uri.var.trackingAnalyticsAccountId" expression="$func:trackingAnalyticsAccountId"/>
        <property name="uri.var.moderateComments" expression="$func:moderateComments"/>
        <property name="uri.var.profileColor" expression="$func:profileColor"/>
        <property name="uri.var.showRelatedChannels" expression="$func:showRelatedChannels"/>
        <property name="uri.var.showBrowseView" expression="$func:showBrowseView"/>
        <property name="uri.var.featuredChannelsTitle" expression="$func:featuredChannelsTitle"/>
        <property name="uri.var.featuredChannelsUrls" expression="$func:featuredChannelsUrls"/>
        <property name="uri.var.unsubscribedTrailer" expression="$func:unsubscribedTrailer"/>
        <property name="uri.var.default" expression="$func:default"/>
        <property name="uri.var.value" expression="$func:value"/>
        <property name="uri.var.language" expression="$func:language"/>
        <property name="uri.var.bannerExternalUrl" expression="$func:bannerExternalUrl"/>
        <property name="uri.var.positiontype" expression="$func:positiontype"/>
        <property name="uri.var.cornerPosition" expression="$func:cornerPosition"/>
        <property name="uri.var.defaultTimingtype" expression="$func:defaultTimingtype"/>
        <property name="uri.var.defaultTimingoffsetMs" expression="$func:defaultTimingoffsetMs"/>
        <property name="uri.var.idtype" expression="$func:idtype"/>
        <property name="uri.var.videoId" expression="$func:videoId"/>
        <property name="uri.var.websiteUrl" expression="$func:websiteUrl"/>
        <property name="uri.var.timingtype" expression="$func:timingtype"/>
        <property name="uri.var.timingoffsetMs" expression="$func:timingoffsetMs"/>
        <property name="uri.var.customMessage" expression="$func:customMessage"/>
        <property name="uri.var.promotedByContentOwner" expression="$func:promotedByContentOwner"/>

        <payloadFactory media-type="json">
            <format>
                {
                "id":"$1",
                "brandingSettings":
                {
                "channel":
                {
                "description":"$2",
                "keywords":"$3",
                "defaultTab":"$4",
                "trackingAnalyticsAccountId":"$5",
                "moderateComments":"$6",
                "profileColor":"$7",
                "showRelatedChannels":"$8",
                "showBrowseView":"$9",
                "featuredChannelsTitle":"$10",
                "featuredChannelsUrls":"$11",
                "unsubscribedTrailer":"$12"
                },
                "image":
                {
                "backgroundImageUrl":
                {
                "default":"$13",
                "localized":
                [
                {
                "language":"$14",
                "value":"$15"
                }
                ]
                },
                "bannerExternalUrl":"$16"
                }
                },
                "invideoPromotion":
                {
                "position":
                {
                "cornerPosition":"$17",
                "type":"$18"
                },
                "defaultTiming":
                {
                "type":"$19",
                "offsetMs":"$20"
                },
                "items":
                [
                {
                "id":
                {
                "type":"$21",
                "videoId":"$22",
                "websiteUrl":"$23"
                },
                "timing":
                {
                "type":"$24",
                "offsetMs":"$25"
                },
                "customMessage":"$26",
                "promotedByContentOwner":"$27"
                }
                ]
                }
                }
            </format>
            <args>
                <arg expression="get-property('uri.var.idParam')"/>
                <arg expression="get-property('uri.var.description')"/>
                <arg expression="get-property('uri.var.keywords')"/>
                <arg expression="get-property('uri.var.defaultTab')"/>
                <arg expression="get-property('uri.var.trackingAnalyticsAccountId')"/>
                <arg expression="get-property('uri.var.moderateComments')"/>
                <arg expression="get-property('uri.var.profileColor')"/>
                <arg expression="get-property('uri.var.showRelatedChannels')"/>
                <arg expression="get-property('uri.var.showBrowseView')"/>
                <arg expression="get-property('uri.var.featuredChannelsTitle')"/>
                <arg expression="get-property('uri.var.featuredChannelsUrls')"/>
                <arg expression="get-property('uri.var.unsubscribedTrailer')"/>
                <arg expression="get-property('uri.var.default')"/>
                <arg expression="get-property('uri.var.language')"/>
                <arg expression="get-property('uri.var.value')"/>
                <arg expression="get-property('uri.var.bannerExternalUrl')"/>
                <arg expression="get-property('uri.var.cornerPosition')"/>
                <arg expression="get-property('uri.var.positiontype')"/>
                <arg expression="get-property('uri.var.defaultTimingtype')"/>
                <arg expression="get-property('uri.var.defaultTimingoffsetMs')"/>
                <arg expression="get-property('uri.var.idtype')"/>
                <arg expression="get-property('uri.var.videoId')"/>
                <arg expression="get-property('uri.var.websiteUrl')"/>
                <arg expression="get-property('uri.var.timingtype')"/>
                <arg expression="get-property('uri.var.timingoffsetMs')"/>
                <arg expression="get-property('uri.var.customMessage')"/>
                <arg expression="get-property('uri.var.promotedByContentOwner')"/>
            </args>
        </payloadFactory>

        <filter
                xpath="get-property('uri.var.description') = '' or (not(string(get-property('uri.var.description'))))">
            <then>
                <script language="js"><![CDATA[
					    var payload = mc.getPayloadJSON();
                        delete payload.brandingSettings.channel.description;
						mc.setPayloadJSON(payload);
					]]>
                </script>
            </then>
        </filter>
        <filter
                xpath="get-property('uri.var.keywords') = '' or (not(string(get-property('uri.var.keywords'))))">
            <then>
                <script language="js"><![CDATA[
					    var payload = mc.getPayloadJSON();
						delete payload.brandingSettings.channel.keywords;
						mc.setPayloadJSON(payload);
					]]>
                </script>
            </then>
        </filter>
        <filter
                xpath="get-property('uri.var.defaultTab') = '' or (not(string(get-property('uri.var.defaultTab'))))">
            <then>
                <script language="js"><![CDATA[
					    var payload = mc.getPayloadJSON();
						delete payload.brandingSettings.channel.defaultTab;
						mc.setPayloadJSON(payload);
					]]>
                </script>
            </then>
        </filter>
        <filter
                xpath="get-property('uri.var.trackingAnalyticsAccountId') = '' or (not(string(get-property('uri.var.trackingAnalyticsAccountId'))))">
            <then>
                <script language="js"><![CDATA[
					    var payload = mc.getPayloadJSON();
						delete payload.brandingSettings.channel.trackingAnalyticsAccountId;
						mc.setPayloadJSON(payload);
					]]>
                </script>
            </then>
        </filter>
        <filter
                xpath="get-property('uri.var.moderateComments') = '' or (not(string(get-property('uri.var.moderateComments'))))">
            <then>
                <script language="js"><![CDATA[
					    var payload = mc.getPayloadJSON();
						delete payload.brandingSettings.channel.moderateComments;
						mc.setPayloadJSON(payload);
					]]>
                </script>
            </then>
        </filter>
        <filter
                xpath="get-property('uri.var.profileColor') = '' or (not(string(get-property('uri.var.profileColor'))))">
            <then>
                <script language="js"><![CDATA[
					    var payload = mc.getPayloadJSON();
						delete payload.brandingSettings.channel.profileColor;
						mc.setPayloadJSON(payload);
					]]>
                </script>
            </then>
        </filter>
        <filter
                xpath="get-property('uri.var.showRelatedChannels') = '' or (not(string(get-property('uri.var.showRelatedChannels'))))">
            <then>
                <script language="js"><![CDATA[
					    var payload = mc.getPayloadJSON();
						delete payload.brandingSettings.channel.showRelatedChannels;
						mc.setPayloadJSON(payload);
					]]>
                </script>
            </then>
        </filter>
        <filter
                xpath="get-property('uri.var.showBrowseView') = '' or (not(string(get-property('uri.var.showBrowseView'))))">
            <then>
                <script language="js"><![CDATA[
					    var payload = mc.getPayloadJSON();
						delete payload.brandingSettings.channel.showBrowseView;
						mc.setPayloadJSON(payload);
					]]>
                </script>
            </then>
        </filter>
        <filter
                xpath="get-property('uri.var.featuredChannelsTitle') = '' or (not(string(get-property('uri.var.featuredChannelsTitle'))))">
            <then>
                <script language="js"><![CDATA[
					    var payload = mc.getPayloadJSON();
						delete payload.brandingSettings.channel.featuredChannelsTitle;
						mc.setPayloadJSON(payload);
					]]>
                </script>
            </then>
        </filter>
        <filter
                xpath="get-property('uri.var.featuredChannelsUrls') = '' or (not(string(get-property('uri.var.featuredChannelsUrls'))))">
            <then>
                <script language="js"><![CDATA[
					    var payload = mc.getPayloadJSON();
						delete payload.brandingSettings.channel.featuredChannelsUrls;
						mc.setPayloadJSON(payload);
					]]>
                </script>
            </then>
        </filter>
        <filter
                xpath="get-property('uri.var.unsubscribedTrailer') = '' or (not(string(get-property('uri.var.unsubscribedTrailer'))))">
            <then>
                <script language="js"><![CDATA[
					    var payload = mc.getPayloadJSON();
						delete payload.brandingSettings.channel.unsubscribedTrailer;
						mc.setPayloadJSON(payload);
					]]>
                </script>
            </then>
        </filter>
        <script language="js"><![CDATA[
            var payload = mc.getPayloadJSON();
            var channel = payload.brandingSettings.channel;
            var count=(count_obj(channel))
            function count_obj(pos){
                var i = 0;
                for(var key in pos){
                    ++i;
                }
                return i;
            }
            if(count == 0)
            {
                delete payload.brandingSettings.channel;
                mc.setPayloadJSON(payload);
            }
            ]]>
        </script>
        <filter
                xpath="get-property('uri.var.default') = '' or (not(string(get-property('uri.var.default'))))">
            <then>
                <script language="js"><![CDATA[
					    var payload = mc.getPayloadJSON();
						delete payload.brandingSettings.image.backgroundImageUrl["default"];
						mc.setPayloadJSON(payload);
					]]>
                </script>
            </then>
        </filter>
        <filter
                xpath="get-property('uri.var.language') = '' or (not(string(get-property('uri.var.language'))))">
            <then>
                <script language="js"><![CDATA[
					    var payload = mc.getPayloadJSON();
						delete payload.brandingSettings.image.backgroundImageUrl.localized[0].language;
						mc.setPayloadJSON(payload);
					]]>
                </script>
            </then>
        </filter>
        <filter
                xpath="get-property('uri.var.value') = '' or (not(string(get-property('uri.var.value'))))">
            <then>
                <script language="js"><![CDATA[
					    var payload = mc.getPayloadJSON();
						delete payload.brandingSettings.image.backgroundImageUrl.localized[0].value;
						mc.setPayloadJSON(payload);
					]]>
                </script>
            </then>
        </filter>
        <script language="js"><![CDATA[
            var payload = mc.getPayloadJSON();
            var localized = payload.brandingSettings.image.backgroundImageUrl.localized[0];
            var count=(count_obj(localized))
            function count_obj(pos){
                var i = 0;
                for(var key in pos){
                    ++i;
                }
                return i;
            }
            if(count == 0)
            {
                delete payload.brandingSettings.image.backgroundImageUrl.localized;
                mc.setPayloadJSON(payload);
            }
            ]]>
        </script>
        <filter
                xpath="get-property('uri.var.bannerExternalUrl') = '' or (not(string(get-property('uri.var.bannerExternalUrl'))))">
            <then>
                <script language="js"><![CDATA[
					    var payload = mc.getPayloadJSON();
						delete payload.brandingSettings.image.bannerExternalUrl;
						mc.setPayloadJSON(payload);
					]]>
                </script>
            </then>
        </filter>
        <script language="js"><![CDATA[
            var payload = mc.getPayloadJSON();
            var backgroundImageUrl = payload.brandingSettings.image.backgroundImageUrl;
            var count=(count_obj(backgroundImageUrl))
            function count_obj(str){
                var i = 0;
                for(var key in str){
                    ++i;
                }
                return i;
            }
            if(count == 0)
            {
                delete payload.brandingSettings.image.backgroundImageUrl;
                mc.setPayloadJSON(payload);
            }
            ]]>
        </script>
        <script language="js"><![CDATA[
            var payload = mc.getPayloadJSON();
            var image = payload.brandingSettings.image;
            var count=(count_obj(image))
            function count_obj(str){
                var i = 0;
                for(var key in str){
                    ++i;
                }
                return i;
            }
            if(count == 0)
            {
                delete payload.brandingSettings.image;
                mc.setPayloadJSON(payload);
            }
            ]]>
        </script>
        <script language="js"><![CDATA[
            var payload = mc.getPayloadJSON();
            var brandingSettings = payload.brandingSettings;
            var count=(count_obj(brandingSettings))
            function count_obj(str){
                var i = 0;
                for(var key in str){
                    ++i;
                }
                return i;
            }
            if(count == 0)
            {
                delete payload.brandingSettings;
                mc.setPayloadJSON(payload);
            }
            ]]>
        </script>
        <filter
                xpath="get-property('uri.var.positiontype') = '' or (not(string(get-property('uri.var.positiontype'))))">
            <then>
                <script language="js"><![CDATA[
                                        var payload = mc.getPayloadJSON();
                                        delete payload.invideoPromotion.position.type;
                                        mc.setPayloadJSON(payload);
                                    ]]>
                </script>
            </then>
        </filter>
        <filter
                xpath="get-property('uri.var.cornerPosition') = '' or (not(string(get-property('uri.var.cornerPosition'))))">
            <then>
                <script language="js"><![CDATA[
                                        var payload = mc.getPayloadJSON();
                                        delete payload.invideoPromotion.position.cornerPosition;
                                        mc.setPayloadJSON(payload);
                                    ]]>
                </script>
            </then>
        </filter>
        <script language="js"><![CDATA[
            var payload = mc.getPayloadJSON();
            var position = payload.invideoPromotion.position;
            var count=(count_obj(position))
            function count_obj(str){
                var i = 0;
                for(var key in str){
                    ++i;
                }
                return i;
            }
            if(count == 0)
            {
                delete payload.invideoPromotion.position;
                mc.setPayloadJSON(payload);
            }
            ]]>
        </script>
        <filter
                xpath="get-property('uri.var.defaultTimingtype') = '' or (not(string(get-property('uri.var.defaultTimingtype'))))">
            <then>
                <script language="js"><![CDATA[
                                        var payload = mc.getPayloadJSON();
                                        delete payload.invideoPromotion.defaultTiming.type;
                                        mc.setPayloadJSON(payload);
                                    ]]>
                </script>
            </then>
        </filter>
        <filter
                xpath="get-property('uri.var.defaultTimingoffsetMs') = '' or (not(string(get-property('uri.var.defaultTimingoffsetMs'))))">
            <then>
                <script language="js"><![CDATA[
                                        var payload = mc.getPayloadJSON();
                                        delete payload.invideoPromotion.defaultTiming.offsetMs;
                                        mc.setPayloadJSON(payload);
                                    ]]>
                </script>
            </then>
        </filter>
        <script language="js"><![CDATA[
            var payload = mc.getPayloadJSON();
            var defaultTiming = payload.invideoPromotion.defaultTiming;
            var count=(count_obj(defaultTiming))
            function count_obj(str){
                var i = 0;
                for(var key in str){
                    ++i;
                }
                return i;
            }
            if(count == 0)
            {
                delete payload.invideoPromotion.defaultTiming;
                mc.setPayloadJSON(payload);
            }
            ]]>
        </script>
        <filter
                xpath="get-property('uri.var.idtype') = '' or (not(string(get-property('uri.var.idtype'))))">
            <then>
                <script language="js"><![CDATA[
                                        var payload = mc.getPayloadJSON();
                                        delete payload.invideoPromotion.items[0].id.type;
                                        mc.setPayloadJSON(payload);
                                    ]]>
                </script>
            </then>
        </filter>
        <filter
                xpath="get-property('uri.var.videoId') = '' or (not(string(get-property('uri.var.videoId'))))">
            <then>
                <script language="js"><![CDATA[
                                        var payload = mc.getPayloadJSON();
                                        delete payload.invideoPromotion.items[0].id.videoId;
                                        mc.setPayloadJSON(payload);
                                    ]]>
                </script>
            </then>
        </filter>
        <filter
                xpath="get-property('uri.var.websiteUrl') = '' or (not(string(get-property('uri.var.websiteUrl'))))">
            <then>
                <script language="js"><![CDATA[
                                        var payload = mc.getPayloadJSON();
                                        delete payload.invideoPromotion.items[0].id.websiteUrl;
                                        mc.setPayloadJSON(payload);
                                    ]]>
                </script>
            </then>
        </filter>
        <script language="js"><![CDATA[
            var payload = mc.getPayloadJSON();
            var id = payload.invideoPromotion.items[0].id;
            var count=(count_obj(id))
            function count_obj(str){
                var i = 0;
                for(var key in str){
                    ++i;
                }
                return i;
            }
            if(count == 0)
            {
                delete payload.invideoPromotion.items[0].id;
                mc.setPayloadJSON(payload);
            }
            ]]>
        </script>
        <filter
                xpath="get-property('uri.var.timingtype') = '' or (not(string(get-property('uri.var.timingtype'))))">
            <then>
                <script language="js"><![CDATA[
                                        var payload = mc.getPayloadJSON();
                                        delete payload.invideoPromotion.items[0].timing.type;
                                        mc.setPayloadJSON(payload);
                                    ]]>
                </script>
            </then>
        </filter>
        <filter
                xpath="get-property('uri.var.timingoffsetMs') = '' or (not(string(get-property('uri.var.timingoffsetMs'))))">
            <then>
                <script language="js"><![CDATA[
                                        var payload = mc.getPayloadJSON();
                                        delete payload.invideoPromotion.items[0].timing.offsetMs;
                                        mc.setPayloadJSON(payload);
                                    ]]>
                </script>
            </then>
        </filter>
        <script language="js"><![CDATA[
            var payload = mc.getPayloadJSON();
            var timing = payload.invideoPromotion.items[0].timing;
            var count=(count_obj(timing))
            function count_obj(str){
                var i = 0;
                for(var key in str){
                    ++i;
                }
                return i;
            }
            if(count == 0)
            {
                delete payload.invideoPromotion.items[0].timing;
                mc.setPayloadJSON(payload);
            }
            ]]>
        </script>
        <filter
                xpath="get-property('uri.var.customMessage') = '' or (not(string(get-property('uri.var.customMessage'))))">
            <then>
                <script language="js"><![CDATA[
                                        var payload = mc.getPayloadJSON();
                                        delete payload.invideoPromotion.items[0].customMessage;
                                        mc.setPayloadJSON(payload);
                                    ]]>
                </script>
            </then>
        </filter>
        <filter
                xpath="get-property('uri.var.promotedByContentOwner') = '' or (not(string(get-property('uri.var.promotedByContentOwner'))))">
            <then>
                <script language="js"><![CDATA[
                                        var payload = mc.getPayloadJSON();
                                        delete payload.invideoPromotion.items[0].promotedByContentOwner;
                                        mc.setPayloadJSON(payload);
                                    ]]>
                </script>
            </then>
        </filter>
        <script language="js"><![CDATA[
            var payload = mc.getPayloadJSON();
            var items = payload.invideoPromotion.items[0];
            var count=(count_obj(items))
            function count_obj(str){
                var i = 0;
                for(var key in str){
                    ++i;
                }
                return i;
            }
            if(count == 0)
            {
                delete payload.invideoPromotion.items;
                mc.setPayloadJSON(payload);
            }
            ]]>
        </script>
        <script language="js"><![CDATA[
            var payload = mc.getPayloadJSON();
            var invideoPromotion = payload.invideoPromotion;
            var count=(count_obj(invideoPromotion))
            function count_obj(str){
                var i = 0;
                for(var key in str){
                    ++i;
                }
                return i;
            }
            if(count == 0)
            {
                delete payload.invideoPromotion;
                mc.setPayloadJSON(payload);
            }
            ]]>
        </script>
        <filter
                xpath="get-property('uri.var.onBehalfOfContentOwner') = '' or  not(string(get-property('uri.var.onBehalfOfContentOwner')))">
            <then>
                <property name="uri.var.onBehalfOfContentOwner" value=""/>
            </then>
            <else>
                <property name="parameters" expression="fn:concat(get-property('parameters'),
                '&amp;onBehalfOfContentOwner=', get-property('uri.var.onBehalfOfContentOwner'))"/>
            </else>
        </filter>
        <filter
                xpath="get-property('uri.var.fields') = '' or  not(string(get-property('uri.var.fields')))">
            <then>
                <property name="uri.var.fields" value=""/>
            </then>
            <else>
                <property name="parameters" expression="fn:concat(get-property('parameters'),
                '&amp;fields=', get-property('uri.var.fields'))"/>
            </else>
        </filter>

        <property name="uri.var.optionalParameters" expression="get-property('parameters')"/>

        <call>
            <endpoint>
                <http method="PUT"
                      uri-template="{uri.var.apiUrl}/channels?part={uri.var.part}{uri.var.optionalParameters}"/>
            </endpoint>
        </call>
    </sequence>
</template>