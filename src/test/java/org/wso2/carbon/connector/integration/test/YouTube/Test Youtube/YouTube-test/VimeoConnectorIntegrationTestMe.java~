/**
 *  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.wso2.carbon.connector.integration.test.vimeo;

import org.apache.axis2.context.ConfigurationContext;
import org.json.JSONObject;
import org.testng.Assert;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;
import org.wso2.carbon.automation.api.clients.proxy.admin.ProxyServiceAdminClient;
import org.wso2.carbon.automation.api.clients.utils.AuthenticateStub;
import org.wso2.carbon.automation.utils.axis2client.ConfigurationContextProvider;
import org.wso2.carbon.connector.integration.test.common.ConnectorIntegrationUtil;
import org.wso2.carbon.esb.ESBIntegrationTest;
import org.wso2.carbon.mediation.library.stub.MediationLibraryAdminServiceStub;
import org.wso2.carbon.mediation.library.stub.upload.MediationLibraryUploaderStub;

import javax.activation.DataHandler;
import java.net.URL;
import java.util.Properties;

public class VimeoConnectorIntegrationTestMe extends ESBIntegrationTest {

    private static final String CONNECTOR_NAME = "vimeo";

    private MediationLibraryUploaderStub mediationLibUploadStub = null;

    private MediationLibraryAdminServiceStub adminServiceStub = null;

    private ProxyServiceAdminClient proxyAdmin;

    private String repoLocation = null;

    private String vimeoConnectorFileName = CONNECTOR_NAME + ".zip";

    private Properties vimeoConnectorProperties = null;

    private String pathToProxiesDirectory = null;

    private String pathToRequestsDirectory = null;

    private String myGroupId = null;

    @BeforeClass(alwaysRun = true)
    public void setEnvironment() throws Exception {

        super.init();

        ConfigurationContextProvider configurationContextProvider = ConfigurationContextProvider.getInstance();
        ConfigurationContext cc = configurationContextProvider.getConfigurationContext();
        mediationLibUploadStub = new MediationLibraryUploaderStub(cc, esbServer.getBackEndUrl() + "MediationLibraryUploader");
        AuthenticateStub.authenticateStub("admin", "admin", mediationLibUploadStub);
        adminServiceStub = new MediationLibraryAdminServiceStub(cc, esbServer.getBackEndUrl() + "MediationLibraryAdminService");

        AuthenticateStub.authenticateStub("admin", "admin", adminServiceStub);

        if (System.getProperty("os.name").toLowerCase().contains("windows")) {
            repoLocation = System.getProperty("connector_repo").replace("/", "\\");
        } else {
            repoLocation = System.getProperty("connector_repo").replace("/", "/");
        }
        proxyAdmin = new ProxyServiceAdminClient(esbServer.getBackEndUrl(), esbServer.getSessionCookie());

        /* ConnectorIntegrationUtil.uploadConnector(repoLocation, mediationLibUploadStub, vimeoConnectorFileName);
        log.info("Sleeping for " + 30000 / 1000 + " seconds while waiting for synapse import");
        Thread.sleep(30000);

        adminServiceStub.updateStatus("{org.wso2.carbon.connector}" + CONNECTOR_NAME, CONNECTOR_NAME,
                "org.wso2.carbon.connector", "enabled");
        */
        vimeoConnectorProperties = ConnectorIntegrationUtil.getConnectorConfigProperties(CONNECTOR_NAME);

        pathToProxiesDirectory = repoLocation + vimeoConnectorProperties.getProperty("proxyDirectoryRelativePath");
        pathToRequestsDirectory = repoLocation + vimeoConnectorProperties.getProperty("requestDirectoryRelativePath");

    }

    @Override
    protected void cleanup() {
        axis2Client.destroy();
    }
//------------------------------------------------------------------ME------------------------------------------------------------------------------------




/*

	@Test(groups = { "wso2.esb" }, description = "vimeo{createMyAlbum} integration test.")
	public void testCreateMyAlbumWithMandatoryParameters() throws Exception {
    
        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_createMyAlbum.txt";
        String methodName = "vimeo_createMyAlbum";
        
        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory+"me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"),vimeoConnectorProperties.getProperty("albumName"),vimeoConnectorProperties.getProperty("albumDescription"),vimeoConnectorProperties.getProperty("albumPrivacy"),vimeoConnectorProperties.getProperty("albumSort"));
        
        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));
        
        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 201);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
}
   


	@Test(groups = { "wso2.esb" }, description = "vimeo{createMyAlbum} integration test.")
	public void testCreateMyAlbumWithMandatoryParametersNegativeCase() throws Exception {
    
        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_createMyAlbum.txt";
        String methodName = "vimeo_createMyAlbum";
        
        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory +"me/"+ methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"),vimeoConnectorProperties.getProperty("invalidName"),vimeoConnectorProperties.getProperty("albumDescription"),vimeoConnectorProperties.getProperty("albumPrivacy"),vimeoConnectorProperties.getProperty("albumSort"));
        
        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));
        
        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 500);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }
*/


/*

@Test(groups = { "wso2.esb" }, description = "vimeo{editMyAlbum} integration test.")
	 public void testEditMyAlbumWithMandatoryParameters() throws Exception {
    
        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_editMyAlbum.txt";
        String methodName = "vimeo_editMyAlbum";
        
        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory+"me/"+ methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"),vimeoConnectorProperties.getProperty("myAlbum_id"),vimeoConnectorProperties.getProperty("editAlbumName"),vimeoConnectorProperties.getProperty("albumDescription"),vimeoConnectorProperties.getProperty("albumPrivacy"),vimeoConnectorProperties.getProperty("albumSort"));
        
        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));
        
        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 204);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


@Test(groups = { "wso2.esb" }, description = "vimeo{editMyAlbum} integration test.")
	 public void testEditMyAlbumWithMandatoryParametersNegativeCase() throws Exception {
    
        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_editMyAlbum.txt";
        String methodName = "vimeo_editMyAlbum";
        
        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory +"me/"+ methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"),vimeoConnectorProperties.getProperty("invalidAlbum_id"),vimeoConnectorProperties.getProperty("editAlbumName"),vimeoConnectorProperties.getProperty("description"),vimeoConnectorProperties.getProperty("albumPrivacy"),vimeoConnectorProperties.getProperty("albumSort"));
        
        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));
        
        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 404);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }




@Test(groups = { "wso2.esb" }, description = "vimeo{addVideoToMyAlbum} integration test.")
	 public void testAddVideoToMyAlbumWithMandatoryParameters() throws Exception {
    
        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_addVideoToMyAlbum.txt";
        String methodName = "vimeo_addVideoToMyAlbum";
        
        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory+"me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"),vimeoConnectorProperties.getProperty("myAlbum_id"),vimeoConnectorProperties.getProperty("albumVideo_id"));
        
        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));
        
        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 204);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

@Test(groups = { "wso2.esb" }, description = "vimeo{addVideoToMyAlbum} integration test.")
	 public void testAddVideoToMyAlbumWithMandatoryParametersNegativeCase() throws Exception {
    
        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_addVideoToMyAlbum.txt";
        String methodName = "vimeo_addVideoToMyAlbum";
        
        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory+"me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"),vimeoConnectorProperties.getProperty("myAlbum_id"),vimeoConnectorProperties.getProperty("invalidVideo_id"));
        
        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));
        
        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 404);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


@Test(groups = { "wso2.esb" }, description = "vimeo{getVideosInMyAlbum} integration test.")
	 public void testGetVideosInMyAlbumWithMandatoryParameters() throws Exception {
    
        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getVideosInMyAlbumMandatory.txt";
        String methodName = "vimeo_getVideosInMyAlbum";
        
        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory+"me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"),vimeoConnectorProperties.getProperty("myAlbum_id"));
        
        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));
        
        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

	@Test(groups = { "wso2.esb" }, description = "vimeo{getVideosInMyAlbum} integration test.")
    public void testGetVideosInMyAlbumWithOptionalParameters() throws Exception {
    
        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getVideosInMyAlbumOptional.txt";
        String methodName = "vimeo_getVideosInMyAlbum";
        
        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory+"me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"),vimeoConnectorProperties.getProperty("myAlbum_id"),vimeoConnectorProperties.getProperty("page"),vimeoConnectorProperties.getProperty("per_page"),vimeoConnectorProperties.getProperty("meQuery"),vimeoConnectorProperties.getProperty("meSort"),vimeoConnectorProperties.getProperty("direction"),vimeoConnectorProperties.getProperty("filter"),vimeoConnectorProperties.getProperty("filter_embeddable"));
        
        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));
        
        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

@Test(groups = { "wso2.esb" }, description = "vimeo{getVideosInMyAlbum} integration test.")
    public void testGetVideosInMyAlbumWithPageOptionalParameter() throws Exception {
    
        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getVideosInMyAlbumOptionalPage.txt";
        String methodName = "vimeo_getVideosInMyAlbum";
        
        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory+"me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"),vimeoConnectorProperties.getProperty("myAlbum_id"),vimeoConnectorProperties.getProperty("page"));
        
        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));
        
        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


@Test(groups = { "wso2.esb" }, description = "vimeo{getVideosInMyAlbum} integration test with negative parameters.")
    public void testGetVideosInMyAlbumWithPageOptionalParameterNegativeCase() throws Exception {
    
        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getVideosInMyAlbumOptionalPage.txt";
        String methodName = "vimeo_getVideosInMyAlbum";
        
        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory+"me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"),vimeoConnectorProperties.getProperty("myAlbum_id"),vimeoConnectorProperties.getProperty("invalidPage"));
        
        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));
        
        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 400);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }




@Test(groups = { "wso2.esb" }, description = "vimeo{getVideosInMyAlbum} integration test.")
    public void testGetVVideosInMyAlbumWithPerPageOptionalParameter() throws Exception {
    
        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getVideosInMyAlbumOptionalPerPage.txt";
        String methodName = "vimeo_getVideosInMyAlbum";
        
        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory+"me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"),vimeoConnectorProperties.getProperty("myAlbum_id"),vimeoConnectorProperties.getProperty("per_page"));
        
        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));
        
        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


@Test(groups = { "wso2.esb" }, description = "vimeo{getVideosInMyAlbum} integration test with negative parameters.")
    public void testGetVideosInMyAlbumWithPerPageOptionalParameterNegativeCase() throws Exception {
    
        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getVideosInMyAlbumOptionalPerPage.txt";
        String methodName = "vimeo_getVideosInMyAlbum";
        
        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory+"me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"),vimeoConnectorProperties.getProperty("myAlbum_id"),vimeoConnectorProperties.getProperty("invalidPer_page"));
        
        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));
        
        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 500);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


@Test(groups = { "wso2.esb" }, description = "vimeo{getVideosInMyAlbum} integration test.")
    public void testGetVideosInMyAlbumWithQueryOptionalParameter() throws Exception {
    
        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getVideosInMyAlbumOptionalQuery.txt";
        String methodName = "vimeo_getVideosInMyAlbum";
        
        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory+"me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"),vimeoConnectorProperties.getProperty("myAlbum_id"),vimeoConnectorProperties.getProperty("meQuery"));
        
        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));
        
        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


@Test(groups = { "wso2.esb" }, description = "vimeo{getVideosInMyAlbum} integration test with negative parameters.")
    public void testGeVideosInMyAlbumWithQueryOptionalParameterNegativeCase() throws Exception {
    
        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getVideosInMyAlbumOptionalQuery.txt";
        String methodName = "vimeo_getVideosInMyAlbum";
        
        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory+"me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"),vimeoConnectorProperties.getProperty("myAlbum_id"),vimeoConnectorProperties.getProperty("invalidQuery"));
        
        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));
        
        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 500);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

@Test(groups = { "wso2.esb" }, description = "vimeo{getVideosInMyAlbum} integration test.")
    public void testGetVideosInMyAlbumWithSortOptionalParameter() throws Exception {
    
        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getVideosInMyAlbumOptionalSort.txt";
        String methodName = "vimeo_getVideosInMyAlbum";
        
        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory+"me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"),vimeoConnectorProperties.getProperty("myAlbum_id"),vimeoConnectorProperties.getProperty("meSort"));
        
        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));
        
        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


@Test(groups = { "wso2.esb" }, description = "vimeo{getVideosInMyAlbum} integration test with negative parameters.")
    public void testGetMyVideosInMyAlbumWithSortOptionalParameterNegativeCase() throws Exception {
    
        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getVideosInMyAlbumOptionalSort.txt";
        String methodName = "vimeo_getVideosInMyAlbum";
        
        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory+"me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"),vimeoConnectorProperties.getProperty("myAlbum_id"),vimeoConnectorProperties.getProperty("invalidSort"));
        
        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));
        
        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 400);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }
@Test(groups = { "wso2.esb" }, description = "vimeo{getVideosInMyAlbum} integration test.")
    public void testGetVideosInMyAlbumWithDirectionOptionalParameter() throws Exception {
    
        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getVideosInMyAlbumOptionalDirection.txt";
        String methodName = "vimeo_getVideosInMyAlbum";
        
        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory+"me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"),vimeoConnectorProperties.getProperty("myAlbum_id"),vimeoConnectorProperties.getProperty("direction"));
        
        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));
        
        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


@Test(groups = { "wso2.esb" }, description = "vimeo{getVideosInMyAlbum} integration test with negative parameters.")
    public void testGetVideosInMyAlbumWithDirectionOptionalParameterNegativeCase() throws Exception {
    
        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getVideosInMyAlbumOptionalDirection.txt";
        String methodName = "vimeo_getVideosInMyAlbum";
        
        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory+"me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"),vimeoConnectorProperties.getProperty("myAlbum_id"),vimeoConnectorProperties.getProperty("invalidDirection"));
        
        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));
        
        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 400);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }
@Test(groups = { "wso2.esb" }, description = "vimeo{getVideosInMyAlbum} integration test.")
    public void testGetVideosInMyAlbumWithFilterOptionalParameter() throws Exception {
    
        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getVideosInMyAlbumOptionalFilter.txt";
        String methodName = "vimeo_getVideosInMyAlbum";
        
        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory+"me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"),vimeoConnectorProperties.getProperty("myAlbum_id"),vimeoConnectorProperties.getProperty("filter_embeddable"));
        
        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));
        
        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


@Test(groups = { "wso2.esb" }, description = "vimeo{getVideosInMyAlbum} integration test with negative parameters.")
    public void testGetVideosInMyAlbumWithFilterOptionalParameterNegativeCase() throws Exception {
    
        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getVideosInMyAlbumOptionalFilter.txt";
        String methodName = "vimeo_getVideosInMyAlbum";
        
        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory+"me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"),vimeoConnectorProperties.getProperty("myAlbum_id"),vimeoConnectorProperties.getProperty("invalidFilter"));
        
        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));
        
        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

@Test(groups = { "wso2.esb" }, description = "vimeo{getVideosInMyAlbum} integration test.")
    public void testGetVideosInMyAlbumWithFilterEmbeddableOptionalParameter() throws Exception {
    
        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getVideosInMyAlbumOptionalFilterEmbeddable.txt";
        String methodName = "vimeo_getVideosInMyAlbum";
        
        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory+"me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"),vimeoConnectorProperties.getProperty("myAlbum_id"),vimeoConnectorProperties.getProperty("filter_embeddable"));
        
        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));
        
        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


@Test(groups = { "wso2.esb" }, description = "vimeo{getVideosInMyAlbum} integration test with negative parameters.")
    public void testGetVideosInMyAlbumWithFilterEmbeddableOptionalParameterNegativeCase() throws Exception {
    
        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getVideosInMyAlbumOptionalFilterEmbeddable.txt";
        String methodName = "vimeo_getVideosInMyAlbum";
        
        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory+"me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("myAlbum_id"),vimeoConnectorProperties.getProperty("invalidFilterEmbeddable"));
        
        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));
        
        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }





@Test(groups = { "wso2.esb" }, description = "vimeo{removeVideoFromMyAlbum} integration test.")
	 public void testRemoveVideoFromMyAlbumWithMandatoryParameters() throws Exception {
    
        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_removeVideoFromMyAlbum.txt";
        String methodName = "vimeo_removeVideoFromMyAlbum";
        
        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory+"me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"),vimeoConnectorProperties.getProperty("myAlbum_id"),vimeoConnectorProperties.getProperty("video_id"));
        
        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));
        
        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 204);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

@Test(groups = { "wso2.esb" }, description = "vimeo{removeVideoFromMyAlbum} integration test.")
	 public void testRemoveVideoFromMyAlbumWithMandatoryParametersNegativeCase() throws Exception {
    
        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_removeVideoFromMyAlbum.txt";
        String methodName = "vimeo_removeVideoFromMyAlbum";
        
        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory+"me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"),vimeoConnectorProperties.getProperty("myAlbum_id"),vimeoConnectorProperties.getProperty("invalidVideo_id"));
        
        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));
        
        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 404);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


@Test(groups = { "wso2.esb" }, description = "vimeo{getInfoOnMyAlbum} integration test.")
	 public void testGetInfoOnMyAlbumWithMandatoryParameters() throws Exception {
    
        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getInfoOnMyAlbum.txt";
        String methodName = "vimeo_getInfoOnMyAlbum";
        
        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory+"me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"),vimeoConnectorProperties.getProperty("myAlbum_id"));
        
        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));
        
        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

@Test(groups = { "wso2.esb" }, description = "vimeo{getInfoOnMyAlbum} integration test.")
	 public void testGetInfoOnMyAlbumWithMandatoryParametersNegativeCase() throws Exception {
    
        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getInfoOnMyAlbum.txt";
        String methodName = "vimeo_getInfoOnMyAlbum";
        
        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory+"me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"),vimeoConnectorProperties.getProperty("invalidAlbum_id"));
        
        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));
        
        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 404);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }
*/

/*
@Test(groups = { "wso2.esb" }, description = "vimeo{deleteMyAlbum} integration test.")
	 public void testDeleteMyAlbumWithMandatoryParameters() throws Exception {
    
        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_deleteMyAlbum.txt";
        String methodName = "vimeo_deleteMyAlbum";
        
        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/"+methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"),vimeoConnectorProperties.getProperty("myAlbum_id"));
        
        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));
        
        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 204);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


@Test(groups = { "wso2.esb" }, description = "vimeo{deleteMyAlbum} integration test.")
	 public void testDeleteMyAlbumWithMandatoryParametersNegativeCase() throws Exception {
    
        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_deleteMyAlbum.txt";
        String methodName = "vimeo_deleteMyAlbum";
        
        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory+"me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"),vimeoConnectorProperties.getProperty("invalidAlbum_id"));
        
        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));
        
        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 404);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }*/


    @Test(groups = {"wso2.esb"}, description = "vimeo{getMe} integration test.")
    public void testGetMeWithMandatoryParameters() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMe.txt";
        String methodName = "vimeo_getMe";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            JSONObject jsonObject = ConnectorIntegrationUtil.sendRequest(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(jsonObject.has("name"));
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

    @Test(groups = {"wso2.esb"}, description = "vimeo{editMe} integration test.")
    public void testEditMeWithMandatoryParameters() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_editMe.txt";
        String methodName = "vimeo_editMe";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("myName"), vimeoConnectorProperties.getProperty("location"), vimeoConnectorProperties.getProperty("bio"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHead = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHead == 204);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{joinGroup} integration test.")
    public void testJoinGroupWithMandatoryParameters() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_joinGroup.txt";
        String methodName = "vimeo_joinGroup";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("group_id"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 204);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

    @Test(groups = {"wso2.esb"}, description = "vimeo{joinGroup} integration test.")
    public void testJoinGroupWithMandatoryParametersNegativeCase() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_joinGroup.txt";
        String methodName = "vimeo_joinGroup";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("invalidGroup_id"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 404);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{leaveGroup} integration test.")
    public void testLeaveGroupWithMandatoryParameters() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_leaveGroup.txt";
        String methodName = "vimeo_leaveGroup";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("group_id"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 204);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

    @Test(groups = {"wso2.esb"}, description = "vimeo{leaveGroup} integration test.")
    public void testLeaveGroupWithMandatoryParametersNegativeCase() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_leaveGroup.txt";
        String methodName = "vimeo_leaveGroup";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("invalidGroup_id"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 404);

        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{likeVideo} integration test.")
    public void testLikeVideoWithMandatoryParameters() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_likeVideo.txt";
        String methodName = "vimeo_likeVideo";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("likeVideo_id"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 204);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

    @Test(groups = {"wso2.esb"}, description = "vimeo{likeVideo} integration test.")
    public void testLikeVideoWithMandatoryParametersNegativeCase() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_likeVideo.txt";
        String methodName = "vimeo_likeVideo";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("invalidVideo_id"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 404);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

    @Test(groups = {"wso2.esb"}, description = "vimeo{unlikeVideo} integration test.")
    public void testUnlikeVideoWithMandatoryParameters() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_unlikeVideo.txt";
        String methodName = "vimeo_unlikeVideo";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("likeVideo_id"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 204);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

    @Test(groups = {"wso2.esb"}, description = "vimeo{unlikeVideo} integration test.")
    public void testUnlikeVideoWithMandatoryParametersNegativeCase() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_unlikeVideo.txt";
        String methodName = "vimeo_unlikeVideo";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("invalidVideo_id"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 404);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{subscribeChannel} integration test.")
    public void testSubscribeChannelWithMandatoryParameters() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_subscribeChannel.txt";
        String methodName = "vimeo_subscribeChannel";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("channel_id"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 204);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

    @Test(groups = {"wso2.esb"}, description = "vimeo{subscribeChannel} integration test.")
    public void testSubscribeChannelWithMandatoryParametersNegativeCase() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_subscribeChannel.txt";
        String methodName = "vimeo_subscribeChannel";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("invalidChannel_id"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 404);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

    @Test(groups = {"wso2.esb"}, description = "vimeo{unsubscribeChannel} integration test.")
    public void testUnsubscribeChannelWithMandatoryParameters() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_unsubscribeChannel.txt";
        String methodName = "vimeo_unsubscribeChannel";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("channel_id"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 204);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

    @Test(groups = {"wso2.esb"}, description = "vimeo{unsubscribeChannel} integration test.")
    public void testUnsubscribeChannelWithMandatoryParametersNegativeCase() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_unsubscribeChannel.txt";
        String methodName = "vimeo_unsubscribeChannel";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("invalidChannel_id"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 404);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{follow} integration test.")
    public void testFollowWithMandatoryParameters() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_follow.txt";
        String methodName = "vimeo_follow";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("follow_user_id"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 204);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

    @Test(groups = {"wso2.esb"}, description = "vimeo{follow} integration test.")
    public void testFollowWithMandatoryParametersNegativeCase() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_follow.txt";
        String methodName = "vimeo_follow";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("invalidFollow_user_id"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 404);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

    @Test(groups = {"wso2.esb"}, description = "vimeo{unfollow} integration test.")
    public void testUnfollowWithMandatoryParameters() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_unfollow.txt";
        String methodName = "vimeo_unfollow";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("follow_user_id"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 204);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{unfollow} integration test.")
    public void testUnfollowWithMandatoryParametersNegativeCase() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_unfollow.txt";
        String methodName = "vimeo_unfollow";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("invalidFollow_user_id"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 404);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyAlbums} integration test.")
    public void testGetMyAlbumsWithMandatoryParameters() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyAlbumsMandatory.txt";
        String methodName = "vimeo_getMyAlbums";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyAlbums} integration test.")
    public void testGetMyAlbumsWithOptionalParameters() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyAlbumsOptional.txt";
        String methodName = "vimeo_getMyAlbums";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("page"), vimeoConnectorProperties.getProperty("per_page"), vimeoConnectorProperties.getProperty("query"), vimeoConnectorProperties.getProperty("meSort"), vimeoConnectorProperties.getProperty("direction"), vimeoConnectorProperties.getProperty("filter"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyAlbums} integration test.")
    public void testGetMyAlbumsWithPageOptionalParameter() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyAlbumsOptionalPage.txt";
        String methodName = "vimeo_getMyAlbums";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("page"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyAlbums} integration test with negative parameters.")
    public void testGetMyAlbumsWithPageOptionalParameterNegativeCase() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyAlbumsOptionalPage.txt";
        String methodName = "vimeo_getMyAlbums";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("invalidPage"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 400);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyAlbums} integration test.")
    public void testGetMyAlbumsWithPerPageOptionalParameter() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyAlbumsOptionalPerPage.txt";
        String methodName = "vimeo_getMyAlbums";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("per_page"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyAlbums} integration test with negative parameters.")
    public void testGetMyAlbumsWithPerPageOptionalParameterNegativeCase() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyAlbumsOptionalPerPage.txt";
        String methodName = "vimeo_getMyAlbums";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("invalidPer_page"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 500);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyAlbums} integration test.")
    public void testGetMyAlbumsWithQueryOptionalParameter() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyAlbumsOptionalQuery.txt";
        String methodName = "vimeo_getMyAlbums";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("query"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyAlbums} integration test with negative parameters.")
    public void testGetMyAlbumsWithQueryOptionalParameterNegativeCase() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyAlbumsOptionalQuery.txt";
        String methodName = "vimeo_getMyAlbums";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("invalidQuery"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyAlbums} integration test.")
    public void testGetMyAlbumsWithSortOptionalParameter() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyAlbumsOptionalSort.txt";
        String methodName = "vimeo_getMyAlbums";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("meSort"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyAlbums} integration test with negative parameters.")
    public void testGetMyAlbumsWithSortOptionalParameterNegativeCase() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyAlbumsOptionalSort.txt";
        String methodName = "vimeo_getMyAlbums";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("invalidSort"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 400);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyAlbums} integration test.")
    public void testGetMyAlbumsWithDirectionOptionalParameter() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyAlbumsOptionalDirection.txt";
        String methodName = "vimeo_getMyAlbums";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("direction"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyAlbums} integration test with negative parameters.")
    public void testGetMyAlbumsWithDirectionOptionalParameterNegativeCase() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyAlbumsOptionalDirection.txt";
        String methodName = "vimeo_getMyAlbums";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("invalidDirection"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 400);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyAlbums} integration test.")
    public void testGetMyAlbumsWithFilterOptionalParameter() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyAlbumsOptionalFilter.txt";
        String methodName = "vimeo_getMyAlbums";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("filter"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyAlbums} integration test with negative parameters.")
    public void testGetMyAlbumsWithFilterOptionalParameterNegativeCase() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyAlbumsOptionalFilter.txt";
        String methodName = "vimeo_getMyAlbums";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("invalidFilter"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyFollowers} integration test.")
    public void testGetMyFollowersWithMandatoryParameters() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyFollowersMandatory.txt";
        String methodName = "vimeo_getMyFollowers";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyFollowers} integration test.")
    public void testGetMyFollowersWithOptionalParameters() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyFollowersOptional.txt";
        String methodName = "vimeo_getMyFollowers";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("page"), vimeoConnectorProperties.getProperty("per_page"), vimeoConnectorProperties.getProperty("query"), vimeoConnectorProperties.getProperty("meSort"), vimeoConnectorProperties.getProperty("direction"), vimeoConnectorProperties.getProperty("filter"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyFollowers} integration test.")
    public void testGetMyFollowersWithPageOptionalParameter() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyFollowersOptionalPage.txt";
        String methodName = "vimeo_getMyFollowers";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("page"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyFollowers} integration test with negative parameters.")
    public void testGetMyFollowersWithPageOptionalParameterNegativeCase() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyFollowersOptionalPage.txt";
        String methodName = "vimeo_getMyFollowers";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("invalidPage"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 400);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyFollowers} integration test.")
    public void testGetMyFollowersWithPerPageOptionalParameter() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyFollowersOptionalPerPage.txt";
        String methodName = "vimeo_getMyFollowers";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("per_page"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyFollowers} integration test with negative parameters.")
    public void testGetMyFollowersWithPerPageOptionalParameterNegativeCase() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyFollowersOptionalPerPage.txt";
        String methodName = "vimeo_getMyFollowers";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("invalidPer_page"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 500);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyFollowers} integration test.")
    public void testGetMyFollowersWithQueryOptionalParameter() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyFollowersOptionalQuery.txt";
        String methodName = "vimeo_getMyFollowers";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("query"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

    // no negatve case ??
    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyFollowers} integration test with negative parameters.")
    public void testGetMyFollowersWithQueryOptionalParameterNegativeCase() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyFollowersOptionalQuery.txt";
        String methodName = "vimeo_getMyFollowers";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("invalidQuery"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyFollowers} integration test.")
    public void testGetMyFollowersWithSortOptionalParameter() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyFollowersOptionalSort.txt";
        String methodName = "vimeo_getMyFollowers";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("meSort"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyFollowers} integration test with negative parameters.")
    public void testGetMyFollowersWithSortOptionalParameterNegativeCase() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyFollowersOptionalSort.txt";
        String methodName = "vimeo_getMyFollowers";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("invalidSort"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 400);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyFollowers} integration test.")
    public void testGetMyFollowersWithDirectionOptionalParameter() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyFollowersOptionalDirection.txt";
        String methodName = "vimeo_getMyFollowers";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("direction"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyFollowers} integration test with negative parameters.")
    public void testGetMyFollowersWithDirectionOptionalParameterNegativeCase() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyFollowersOptionalDirection.txt";
        String methodName = "vimeo_getMyFollowers";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("invalidDirection"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 400);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyFollowing} integration test.")
    public void testGetMyFollowingWithMandatoryParameters() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyFollowingMandatory.txt";
        String methodName = "vimeo_getMyFollowing";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyFollowing} integration test.")
    public void testGetMyFollowingWithOptionalParameters() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyFollowingOptional.txt";
        String methodName = "vimeo_getMyFollowing";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("page"), vimeoConnectorProperties.getProperty("per_page"), vimeoConnectorProperties.getProperty("query"), vimeoConnectorProperties.getProperty("meSort"), vimeoConnectorProperties.getProperty("direction"), vimeoConnectorProperties.getProperty("filter"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyFollowing} integration test.")
    public void testGetMyFollowingWithPageOptionalParameter() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyFollowingOptionalPage.txt";
        String methodName = "vimeo_getMyFollowing";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("page"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyFollowing} integration test with negative parameters.")
    public void testGetMyFollowingWithPageOptionalParameterNegativeCase() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyFollowingOptionalPage.txt";
        String methodName = "vimeo_getMyFollowing";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("invalidPage"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 400);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyFollowing} integration test.")
    public void testGetMyFollowingWithPerPageOptionalParameter() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyFollowingOptionalPerPage.txt";
        String methodName = "vimeo_getMyFollowing";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("per_page"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyFollowing} integration test with negative parameters.")
    public void testGetMyFollowingWithPerPageOptionalParameterNegativeCase() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyFollowingOptionalPerPage.txt";
        String methodName = "vimeo_getMyFollowing";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("invalidPer_page"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 500);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyFollowing} integration test.")
    public void testGetMyFollowingWithQueryOptionalParameter() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyFollowingOptionalQuery.txt";
        String methodName = "vimeo_getMyFollowing";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("query"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyFollowing} integration test with negative parameters.")
    public void testGetMyFollowingWithQueryOptionalParameterNegativeCase() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyFollowingOptionalQuery.txt";
        String methodName = "vimeo_getMyFollowing";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("invalidQuery"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyFollowing} integration test.")
    public void testGetMyFollowingWithSortOptionalParameter() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyFollowingOptionalSort.txt";
        String methodName = "vimeo_getMyFollowing";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("meSort"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyFollowing} integration test with negative parameters.")
    public void testGetMyFollowingWithSortOptionalParameterNegativeCase() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyFollowingOptionalSort.txt";
        String methodName = "vimeo_getMyFollowing";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("invalidSort"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 400);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyFollowing} integration test.")
    public void testGetMyFollowingWithDirectionOptionalParameter() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyFollowingOptionalDirection.txt";
        String methodName = "vimeo_getMyFollowing";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("direction"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyFollowing} integration test with negative parameters.")
    public void testGetMyFollowingWithDirectionOptionalParameterNegativeCase() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyFollowingOptionalDirection.txt";
        String methodName = "vimeo_getMyFollowing";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("invalidDirection"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 400);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyFollowing} integration test.")
    public void testGetMyFollowingWithFilterOptionalParameter() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyFollowingOptionalFilter.txt";
        String methodName = "vimeo_getMyFollowing";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("followingFilter"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyFollowing} integration test with negative parameters.")
    public void testGetMyFollowingWithFilterOptionalParameterNegativeCase() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyFollowingOptionalFilter.txt";
        String methodName = "vimeo_getMyFollowing";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("invalidFilter"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyFollowingChannels} integration test.")
    public void testGetMyFollowingChannelsWithMandatoryParameters() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyFollowingChannelsMandatory.txt";
        String methodName = "vimeo_getMyFollowingChannels";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyFollowingChannels} integration test.")
    public void testGetMyFollowingChannelsWithOptionalParameters() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyFollowingChannelsOptional.txt";
        String methodName = "vimeo_getMyFollowingChannels";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("page"), vimeoConnectorProperties.getProperty("per_page"), vimeoConnectorProperties.getProperty("query"), vimeoConnectorProperties.getProperty("meSort"), vimeoConnectorProperties.getProperty("direction"), vimeoConnectorProperties.getProperty("filter"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyFollowingChannels} integration test.")
    public void testGetMyFollowingChannelsWithPageOptionalParameter() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyFollowingChannelsOptionalPage.txt";
        String methodName = "vimeo_getMyFollowingChannels";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("page"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyFollowingChannels} integration test with negative parameters.")
    public void testGetMyFollowingChannelsWithPageOptionalParameterNegativeCase() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyFollowingChannelsOptionalPage.txt";
        String methodName = "vimeo_getMyFollowingChannels";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("invalidPage"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 400);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyFollowingChannels} integration test.")
    public void testGetMyFollowingChannelsWithPerPageOptionalParameter() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyFollowingChannelsOptionalPerPage.txt";
        String methodName = "vimeo_getMyFollowingChannels";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("per_page"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyFollowingChannels} integration test with negative parameters.")
    public void testGetMyFollowingChannelsWithPerPageOptionalParameterNegativeCase() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyFollowingChannelsOptionalPerPage.txt";
        String methodName = "vimeo_getMyFollowingChannels";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("invalidPer_page"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 500);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyFollowingChannels} integration test.")
    public void testGetMyFollowingChannelsWithQueryOptionalParameter() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyFollowingChannelsOptionalQuery.txt";
        String methodName = "vimeo_getMyFollowingChannels";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("query"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyFollowingChannels} integration test with negative parameters.")
    public void testGetMyFollowingChannelsWithQueryOptionalParameterNegativeCase() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyFollowingChannelsOptionalQuery.txt";
        String methodName = "vimeo_getMyFollowingChannels";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("invalidQuery"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyFollowingChannels} integration test.")
    public void testGetMyFollowingChannelsWithSortOptionalParameter() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyFollowingChannelsOptionalSort.txt";
        String methodName = "vimeo_getMyFollowingChannels";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("meSort"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyFollowingChannels} integration test with negative parameters.")
    public void testGetMyFollowingChannelsWithSortOptionalParameterNegativeCase() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyFollowingChannelsOptionalSort.txt";
        String methodName = "vimeo_getMyFollowingChannels";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("invalidSort"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 400);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyFollowingChannels} integration test.")
    public void testGetMyFollowingChannelsWithDirectionOptionalParameter() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyFollowingChannelsOptionalDirection.txt";
        String methodName = "vimeo_getMyFollowingChannels";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("direction"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyFollowingChannels} integration test with negative parameters.")
    public void testGetMyFollowingChannelsWithDirectionOptionalParameterNegativeCase() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyFollowingChannelsOptionalDirection.txt";
        String methodName = "vimeo_getMyFollowingChannels";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("invalidDirection"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 400);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyFollowingChannels} integration test.")
    public void testGetMyFollowingChannelsWithFilterOptionalParameter() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyFollowingChannelsOptionalFilter.txt";
        String methodName = "vimeo_getMyFollowingChannels";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("followingChannelFilter"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyFollowingChannels} integration test with negative parameters.")
    public void testGetMyFollowingChannelsWithFilterOptionalParameterNegativeCase() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyFollowingChannelsOptionalFilter.txt";
        String methodName = "vimeo_getMyFollowingChannels";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("invalidFilter"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyJoinedGroups} integration test.")
    public void testGetMyJoinedGroupsWithMandatoryParameters() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyJoinedGroupsMandatory.txt";
        String methodName = "vimeo_getMyJoinedGroups";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyJoinedGroups} integration test.")
    public void testGetMyJoinedGroupsWithOptionalParameters() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyJoinedGroupsOptional.txt";
        String methodName = "vimeo_getMyJoinedGroups";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("page"), vimeoConnectorProperties.getProperty("per_page"), vimeoConnectorProperties.getProperty("query"), vimeoConnectorProperties.getProperty("meSort"), vimeoConnectorProperties.getProperty("direction"), vimeoConnectorProperties.getProperty("filter"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyJoinedGroups} integration test.")
    public void testGetMyJoinedGroupsWithPageOptionalParameter() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyJoinedGroupsOptionalPage.txt";
        String methodName = "vimeo_getMyJoinedGroups";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("page"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyJoinedGroups} integration test with negative parameters.")
    public void testGetMyJoinedGroupsWithPageOptionalParameterNegativeCase() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyJoinedGroupsOptionalPage.txt";
        String methodName = "vimeo_getMyJoinedGroups";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("invalidPage"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 400);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyJoinedGroups} integration test.")
    public void testGetMyJoinedGroupsWithPerPageOptionalParameter() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyJoinedGroupsOptionalPerPage.txt";
        String methodName = "vimeo_getMyJoinedGroups";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("per_page"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyJoinedGroups} integration test with negative parameters.")
    public void testGetMyJoinedGroupsWithPerPageOptionalParameterNegativeCase() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyJoinedGroupsOptionalPerPage.txt";
        String methodName = "vimeo_getMyJoinedGroups";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("invalidPer_page"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 500);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyJoinedGroups} integration test.")
    public void testGetMyJoinedGroupsWithQueryOptionalParameter() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyJoinedGroupsOptionalQuery.txt";
        String methodName = "vimeo_getMyJoinedGroups";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("query"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyJoinedGroups} integration test with negative parameters.")
    public void testGetMyJoinedGroupsWithQueryOptionalParameterNegativeCase() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyJoinedGroupsOptionalQuery.txt";
        String methodName = "vimeo_getMyJoinedGroups";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("invalidQuery"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyJoinedGroups} integration test.")
    public void testGetMyJoinedGroupsWithSortOptionalParameter() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyJoinedGroupsOptionalSort.txt";
        String methodName = "vimeo_getMyJoinedGroups";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("meSort"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyJoinedGroups} integration test with negative parameters.")
    public void testGetMyJoinedGroupsWithSortOptionalParameterNegativeCase() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyJoinedGroupsOptionalSort.txt";
        String methodName = "vimeo_getMyJoinedGroups";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("invalidSort"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 400);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyJoinedGroups} integration test.")
    public void testGetMyJoinedGroupsWithDirectionOptionalParameter() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyJoinedGroupsOptionalDirection.txt";
        String methodName = "vimeo_getMyJoinedGroups";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("direction"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyJoinedGroups} integration test with negative parameters.")
    public void testGetMyJoinedGroupsWithDirectionOptionalParameterNegativeCase() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyJoinedGroupsOptionalDirection.txt";
        String methodName = "vimeo_getMyJoinedGroups";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("invalidDirection"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 400);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyJoinedGroups} integration test.")
    public void testGetMyJoinedGroupsWithFilterOptionalParameter() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyJoinedGroupsOptionalFilter.txt";
        String methodName = "vimeo_getMyJoinedGroups";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("GroupsFilter"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getMyJoinedGroups} integration test with negative parameters.")
    public void testGetMyJoinedGroupsWithFilterOptionalParameterNegativeCase() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getMyJoinedGroupsOptionalFilter.txt";
        String methodName = "vimeo_getMyJoinedGroups";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("invalidFilter"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getVideosLikedByMe} integration test.")
    public void testGetVideosLikedByMeWithMandatoryParameters() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getVideosLikedByMeMandatory.txt";
        String methodName = "vimeo_getVideosLikedByMe";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

    @Test(groups = {"wso2.esb"}, description = "vimeo{getVideosLikedByMe} integration test.")
    public void testGetVideosLikedByMeWithOptionalParameters() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getVideosLikedByMeOptional.txt";
        String methodName = "vimeo_getVideosLikedByMe";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("page"), vimeoConnectorProperties.getProperty("per_page"), vimeoConnectorProperties.getProperty("meQuery"), vimeoConnectorProperties.getProperty("meSort"), vimeoConnectorProperties.getProperty("direction"), vimeoConnectorProperties.getProperty("filter"), vimeoConnectorProperties.getProperty("filter_embeddable"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

    @Test(groups = {"wso2.esb"}, description = "vimeo{getVideosLikedByMe} integration test.")
    public void testGetVideosLikedByMeWithPageOptionalParameter() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getVideosLikedByMeOptionalPage.txt";
        String methodName = "vimeo_getVideosLikedByMe";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("page"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getVideosLikedByMe} integration test with negative parameters.")
    public void testGetVideosLikedByMeWithPageOptionalParameterNegativeCase() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getVideosLikedByMeOptionalPage.txt";
        String methodName = "vimeo_getVideosLikedByMe";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("invalidPage"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 400);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getVideosLikedByMe} integration test.")
    public void testGetVideosLikedByMeWithPerPageOptionalParameter() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getVideosLikedByMeOptionalPerPage.txt";
        String methodName = "vimeo_getVideosLikedByMe";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("per_page"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getVideosLikedByMe} integration test with negative parameters.")
    public void testGetVideosLikedByMeWithPerPageOptionalParameterNegativeCase() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getVideosLikedByMeOptionalPerPage.txt";
        String methodName = "vimeo_getVideosLikedByMe";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("invalidPer_page"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 500);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getVideosLikedByMe} integration test.")
    public void testGetVideosLikedByMeWithQueryOptionalParameter() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getVideosLikedByMeOptionalQuery.txt";
        String methodName = "vimeo_getVideosLikedByMe";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("meQuery"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getVideosLikedByMe} integration test with negative parameters.")
    public void testGetVideosLikedByMeWithQueryOptionalParameterNegativeCase() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getVideosLikedByMeOptionalQuery.txt";
        String methodName = "vimeo_getVideosLikedByMe";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("invalidQuery"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

    @Test(groups = {"wso2.esb"}, description = "vimeo{getVideosLikedByMe} integration test.")
    public void testGetVideosLikedByMeWithSortOptionalParameter() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getVideosLikedByMeOptionalSort.txt";
        String methodName = "vimeo_getVideosLikedByMe";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("meSort"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getVideosLikedByMe} integration test with negative parameters.")
    public void testGetMyVideosLikedByMeWithSortOptionalParameterNegativeCase() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getVideosLikedByMeOptionalSort.txt";
        String methodName = "vimeo_getVideosLikedByMe";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("invalidSort"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 400);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

    @Test(groups = {"wso2.esb"}, description = "vimeo{getVideosLikedByMe} integration test.")
    public void testGetVideosLikedByMeWithDirectionOptionalParameter() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getVideosLikedByMeOptionalDirection.txt";
        String methodName = "vimeo_getVideosLikedByMe";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("direction"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getVideosLikedByMe} integration test with negative parameters.")
    public void testGetVideosLikedByMeWithDirectionOptionalParameterNegativeCase() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getVideosLikedByMeOptionalDirection.txt";
        String methodName = "vimeo_getVideosLikedByMe";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("invalidDirection"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 400);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

    @Test(groups = {"wso2.esb"}, description = "vimeo{getVideosLikedByMe} integration test.")
    public void testGetVideosLikedByMeWithFilterOptionalParameter() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getVideosLikedByMeOptionalFilter.txt";
        String methodName = "vimeo_getVideosLikedByMe";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("filter_embeddable"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getVideosLikedByMe} integration test with negative parameters.")
    public void testGetVideosLikedByMeWithFilterOptionalParameterNegativeCase() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getVideosLikedByMeOptionalFilter.txt";
        String methodName = "vimeo_getVideosLikedByMe";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("invalidFilter"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

    @Test(groups = {"wso2.esb"}, description = "vimeo{getVideosLikedByMe} integration test.")
    public void testGetVideosLikedByMeWithFilterEmbeddableOptionalParameter() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getVideosLikedByMeOptionalFilterEmbeddable.txt";
        String methodName = "vimeo_getVideosLikedByMe";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("filter_embeddable"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getVideosLikedByMe} integration test with negative parameters.")
    public void testGetVideosLikedByMeWithFilterEmbeddableOptionalParameterNegativeCase() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getVideosLikedByMeOptionalFilterEmbeddable.txt";
        String methodName = "vimeo_getVideosLikedByMe";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("invalidFilterEmbeddable"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

    @Test(groups = {"wso2.esb"}, description = "vimeo{getVideosUploadedByMe} integration test.")
    public void testGetVideosUploadedByMeWithMandatoryParameters() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getVideosUploadedByMeMandatory.txt";
        String methodName = "vimeo_getVideosUploadedByMe";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

    @Test(groups = {"wso2.esb"}, description = "vimeo{getVideosUploadedByMe} integration test.")
    public void testGetVideosUploadedByMeWithOptionalParameters() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getVideosUploadedByMeOptional.txt";
        String methodName = "vimeo_getVideosUploadedByMe";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("page"), vimeoConnectorProperties.getProperty("per_page"), vimeoConnectorProperties.getProperty("meQuery"), vimeoConnectorProperties.getProperty("meSort"), vimeoConnectorProperties.getProperty("direction"), vimeoConnectorProperties.getProperty("filter"), vimeoConnectorProperties.getProperty("filter_embeddable"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getVideosUploadedByMe} integration test.")
    public void testGetVideosUploadedByMeWithPageOptionalParameter() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getVideosUploadedByMeOptionalPage.txt";
        String methodName = "vimeo_getVideosUploadedByMe";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("page"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getVideosUploadedByMe} integration test with negative parameters.")
    public void testGetVideosUploadedByMeWithPageOptionalParameterNegativeCase() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getVideosUploadedByMeOptionalPage.txt";
        String methodName = "vimeo_getVideosUploadedByMe";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("invalidPage"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 400);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{VideosUploadedByMe} integration test.")
    public void testGetVideosUploadedByMeWithPerPageOptionalParameter() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getVideosUploadedByMeOptionalPerPage.txt";
        String methodName = "vimeo_getVideosUploadedByMe";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("per_page"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getVideosLikedByMe} integration test with negative parameters.")
    public void testGetVideosUploadedByMeWithPerPageOptionalParameterNegativeCase() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getVideosUploadedByMeOptionalPerPage.txt";
        String methodName = "vimeo_getVideosUploadedByMe";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("invalidPer_page"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 500);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getVideosUploadedByMe} integration test.")
    public void testGetVideosUploadedByMeWithQueryOptionalParameter() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getVideosUploadedByMeOptionalQuery.txt";
        String methodName = "vimeo_getVideosUploadedByMe";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("meQuery"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getVideosUploadedByMe} integration test with negative parameters.")
    public void testGetVideosUploadedByMeWithQueryOptionalParameterNegativeCase() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getVideosUploadedByMeOptionalQuery.txt";
        String methodName = "vimeo_getVideosUploadedByMe";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("invalidQuery"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

    @Test(groups = {"wso2.esb"}, description = "vimeo{getVideosUploadedByMe} integration test.")
    public void testGetVideosUploadedByMeWithSortOptionalParameter() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getVideosUploadedByMeOptionalSort.txt";
        String methodName = "vimeo_getVideosUploadedByMe";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("meSort"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getVideosUploadedByMe} integration test with negative parameters.")
    public void testGetMyVideosUploadedByMeWithSortOptionalParameterNegativeCase() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getVideosUploadedByMeOptionalSort.txt";
        String methodName = "vimeo_getVideosUploadedByMe";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("invalidSort"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 400);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

    @Test(groups = {"wso2.esb"}, description = "vimeo{getVideosUploadedByMe} integration test.")
    public void testGetVideosUploadedByMeWithDirectionOptionalParameter() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getVideosUploadedByMeOptionalDirection.txt";
        String methodName = "vimeo_getVideosUploadedByMe";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("direction"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getVideosUploadedByMe} integration test with negative parameters.")
    public void testGetVideosUploadedByMeWithDirectionOptionalParameterNegativeCase() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getVideosUploadedByMeOptionalDirection.txt";
        String methodName = "vimeo_getVideosUploadedByMe";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("invalidDirection"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 400);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

    @Test(groups = {"wso2.esb"}, description = "vimeo{getVideosUploadedByMe} integration test.")
    public void testGetVideosUploadedByMeWithFilterOptionalParameter() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getVideosUploadedByMeOptionalFilter.txt";
        String methodName = "vimeo_getVideosUploadedByMe";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("filter_embeddable"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getVideosUploadedByMe} integration test with negative parameters.")
    public void testGetVideosUploadedByMeWithFilterOptionalParameterNegativeCase() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getVideosUploadedByMeOptionalFilter.txt";
        String methodName = "vimeo_getVideosUploadedByMe";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("invalidFilter"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

    @Test(groups = {"wso2.esb"}, description = "vimeo{getVideosUploadedByMe} integration test.")
    public void testGetVideosUploadedByMeWithFilterEmbeddableOptionalParameter() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getVideosUploadedByMeOptionalFilterEmbeddable.txt";
        String methodName = "vimeo_getVideosUploadedByMe";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("filter_embeddable"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getVideosUploadedByMe} integration test with negative parameters.")
    public void testGetVideosUploadedByMeWithFilterEmbeddableOptionalParameterNegativeCase() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getVideosUploadedByMeOptionalFilterEmbeddable.txt";
        String methodName = "vimeo_getVideosUploadedByMe";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("invalidFilterEmbeddable"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getVideosInMyFeed} integration test.")
    public void testGetVideosInMyFeedWithMandatoryParameters() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getVideosInMyFeedMandatory.txt";
        String methodName = "vimeo_getVideosInMyFeed";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("offset"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

    @Test(groups = {"wso2.esb"}, description = "vimeo{getVideosInMyFeed} integration test.")
    public void testGetVideosInMyFeedWithPageOptionalParameter() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getVideosInMyFeedOptionalPage.txt";
        String methodName = "vimeo_getVideosInMyFeed";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("offset"), vimeoConnectorProperties.getProperty("page"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getVideosInMyFeed} integration test with negative parameters.")
    public void testGetVideosInMyFeedWithPageOptionalParameterNegativeCase() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getVideosInMyFeedOptionalPage.txt";
        String methodName = "vimeo_getVideosInMyFeed";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("offset"), vimeoConnectorProperties.getProperty("invalidPage"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 400);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{VideosInMyFeed} integration test.")
    public void testGetVideosInMyFeedWithPerPageOptionalParameter() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getVideosInMyFeedOptionalPerPage.txt";
        String methodName = "vimeo_getVideosInMyFeed";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("offset"), vimeoConnectorProperties.getProperty("per_page"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }


    @Test(groups = {"wso2.esb"}, description = "vimeo{getVideosInMyFeed} integration test with negative parameters.")
    public void testGetVideosInMyFeedWithPerPageOptionalParameterNegativeCase() throws Exception {

        String jsonRequestFilePath = pathToRequestsDirectory + "me/esb_getVideosInMyFeedOptionalPerPage.txt";
        String methodName = "vimeo_getVideosInMyFeed";

        final String jsonString = ConnectorIntegrationUtil.getFileContent(jsonRequestFilePath);
        final String proxyFilePath = "file:///" + pathToProxiesDirectory + "me/" + methodName + ".xml";
        String modifiedJsonString = String.format(jsonString, vimeoConnectorProperties.getProperty("accessToken"), vimeoConnectorProperties.getProperty("offset"), vimeoConnectorProperties.getProperty("invalidPer_page"));

        proxyAdmin.addProxyService(new DataHandler(new URL(proxyFilePath)));

        try {
            int responseHeader = ConnectorIntegrationUtil.sendRequestToRetriveHeaders(getProxyServiceURL(methodName), modifiedJsonString);
            Assert.assertTrue(responseHeader == 200);
        } finally {
            proxyAdmin.deleteProxy(methodName);
        }
    }

}
